// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	threads "fgd-alterra-29/business/threads"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ActivateThread provides a mock function with given fields: ctx, id
func (_m *Repository) ActivateThread(ctx context.Context, id int) (threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThread provides a mock function with given fields: ctx, domain, id
func (_m *Repository) CreateThread(ctx context.Context, domain threads.Domain, id int) (threads.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, threads.Domain, int) threads.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, threads.Domain, int) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThread provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteThread(ctx context.Context, id int) (threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHomepageThreads provides a mock function with given fields: ctx, id
func (_m *Repository) GetHomepageThreads(ctx context.Context, id int) ([]threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHotThreads provides a mock function with given fields: ctx
func (_m *Repository) GetHotThreads(ctx context.Context) ([]threads.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []threads.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileThreads provides a mock function with given fields: ctx, id
func (_m *Repository) GetProfileThreads(ctx context.Context, id int) ([]threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendationThreads provides a mock function with given fields: ctx, id
func (_m *Repository) GetRecommendationThreads(ctx context.Context, id int) ([]threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearch provides a mock function with given fields: ctx, threadname
func (_m *Repository) GetSearch(ctx context.Context, threadname string) ([]threads.Domain, error) {
	ret := _m.Called(ctx, threadname)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []threads.Domain); ok {
		r0 = rf(ctx, threadname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, threadname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSideNewsThreads provides a mock function with given fields: ctx
func (_m *Repository) GetSideNewsThreads(ctx context.Context) ([]threads.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []threads.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetThreadByID(ctx context.Context, id int) (threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadQtyByCategory provides a mock function with given fields: ctx, domain, id
func (_m *Repository) GetThreadQtyByCategory(ctx context.Context, domain threads.Domain, id int) (threads.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, threads.Domain, int) threads.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, threads.Domain, int) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadQuantity provides a mock function with given fields: ctx
func (_m *Repository) GetThreadQuantity(ctx context.Context) (threads.Domain, error) {
	ret := _m.Called(ctx)

	var r0 threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context) threads.Domain); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(threads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreads provides a mock function with given fields: ctx
func (_m *Repository) GetThreads(ctx context.Context) ([]threads.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []threads.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsByCategoryID provides a mock function with given fields: ctx, id
func (_m *Repository) GetThreadsByCategoryID(ctx context.Context, id int) ([]threads.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []threads.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) GetThreadsByTitle(ctx context.Context, title string) ([]threads.Domain, error) {
	ret := _m.Called(ctx, title)

	var r0 []threads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []threads.Domain); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
