// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	commentreport "fgd-alterra-29/business/comment_report"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AdminGetReports provides a mock function with given fields: ctx
func (_m *Repository) AdminGetReports(ctx context.Context) ([]commentreport.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []commentreport.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []commentreport.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commentreport.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportComment provides a mock function with given fields: ctx, domain
func (_m *Repository) CreateReportComment(ctx context.Context, domain commentreport.Domain) (commentreport.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 commentreport.Domain
	if rf, ok := ret.Get(0).(func(context.Context, commentreport.Domain) commentreport.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(commentreport.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, commentreport.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCommentReport provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteCommentReport(ctx context.Context, id int) (commentreport.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 commentreport.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) commentreport.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(commentreport.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentReportStat provides a mock function with given fields: ctx
func (_m *Repository) GetCommentReportStat(ctx context.Context) ([]commentreport.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []commentreport.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []commentreport.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commentreport.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchReportsByCategory provides a mock function with given fields: ctx, category
func (_m *Repository) SearchReportsByCategory(ctx context.Context, category string) ([]commentreport.Domain, error) {
	ret := _m.Called(ctx, category)

	var r0 []commentreport.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []commentreport.Domain); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commentreport.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
